<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[nginx开启/关闭目录浏览权限]]></title>
      <url>http://blog.jade640.pub/2016/10/19/nginx%E5%BC%80%E5%90%AF-%E5%85%B3%E9%97%AD%E7%9B%AE%E5%BD%95%E6%B5%8F%E8%A7%88%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<p>在使用thinkphp框架时，经常会看到在很多项目目录下有许多内容为空的<strong>index.html</strong>文件，这些文件并没有“任何实际的意义”，却非常碍眼的存在于每一级的目录中，这是为什么呢？<br>thinkphp官方给出的解释如下：</p>
<blockquote>
<p>在自动生成目录结构的同时，在各个目录下面我们还看到了index.html文件，这是ThinkPHP自动生成的目录安全文件。<br>为了避免某些服务器开启了目录浏览权限后可以直接在浏览器输入URL地址查看目录，系统默认开启了目录安全文件机制，会在自动生成目录的时候生成空白的index.html文件</p>
</blockquote>
<p>在上面这段解释中，我们可以找到2个关键概念：<strong>目录安全文件</strong>, <strong>服务器开启目录浏览权限</strong>。<br>就是说，thinkphp之所以要生成这么多空白的index.html文件，就是为了避免服务器不小心开启了目录浏览权限，导致服务器目录可以直接通过浏览器访问。</p>
<p>既然如此，就需要验证一下了。首先，我使用的是nginx服务器，nginx服务器默认是关闭目录列表（directory listing）的。通过修改nginx配置文件，打开整个项目根目录的文件列表权限，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location /&#123;</div><div class="line">    root $root_path;</div><div class="line">    autoindex on;</div><div class="line">    autoindex_exact_size off;</div><div class="line">    autoindex_localtime on;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，我们就可以访问项目的根目录了。访问效果如下图：<br><img src="http://obsd0zj7w.bkt.clouddn.com/20161019-root-directory.png" alt="root-directory"><br>在根目录下因为没有目录安全文件，所以可以查看目录列表，但是当我们进入/Application/目录时，因为目录安全文件的原因，就看不到目录列表了。<br>下图是整个项目的目录结构：<br><img src="http://obsd0zj7w.bkt.clouddn.com/20161019-directory-tree.png" alt="directory-tree"><br>当点击进入/Application/目录时，结果如下：<br><img src="http://obsd0zj7w.bkt.clouddn.com/20161019-proctect-file.png" alt="proctect-file"><br>在这里，我们有理由猜测这样的空界面就是/Application/目录下的index.html文件，因此我在简单修改了该index.html文件，如下：<br>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello,我是/Application/index.html</div></pre></td></tr></table></figure></p>
<p>再次访问/Application/目录，显示如下：<br><img src="http://obsd0zj7w.bkt.clouddn.com/20161019-protect-file-change.png" alt="proctect-file-change"><br>结果和猜测一致，thinkphp的目录安全文件就是在你需要保护的目录中放置空的index.html文件，这样当服务器的目录列表打开时，你也看不到目录的内容，只能看到空白的index.html，从而起到保护的作用。</p>
<p>那么，为什么我访问/Application/目录，当目录下存在index.html时会显示index.html而不是目录结构呢？<br>这是nginx给出的解释：</p>
<blockquote>
<p>The ngx_http_autoindex_module module processes requests ending with the slash character (‘/’) and produces a directory listing. Usually a request is passed to<br>the ngx_http_autoindex_module module when the ngx_http_index_module module cannot find an index file. </p>
</blockquote>
<p>就是说，通常当nginx的ngx_http_autoindex_module模块无法找到index文件时，就会把请求传给ngx_http_autoindex_module模块，而这个模块的作用就是以展示目录列表的形式来处理以/结尾的请求，就是我们在前面看到的显示文件目录的形式。（当然，前提时nginx开启了显示目录列表，而默认是关闭的，详情<a href="http://nginx.org/en/docs/http/ngx_http_autoindex_module.html" target="_blank" rel="external">参考文件1</a>）</p>
<p>另外nginx还有deny all指令来实现禁止访问、allow实现允许访问。参见<a href="http://nginx.org/en/docs/http/ngx_http_access_module.html" target="_blank" rel="external">参考文件2</a>,<a href="https://segmentfault.com/q/1010000003755008/a-1020000003755016" target="_blank" rel="external">参考文件3</a></p>
<p><strong>参考文献</strong><br>[1]<a href="http://nginx.org/en/docs/http/ngx\_http\_autoindex\_module.html" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx\_http\_autoindex\_module.html</a><br>[2]<a href="http://nginx.org/en/docs/http/ngx\_http\_access\_module.html" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx\_http\_access\_module.html</a><br>[3]<a href="https://segmentfault.com/q/1010000003755008/a-1020000003755016" target="_blank" rel="external">https://segmentfault.com/q/1010000003755008/a-1020000003755016</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ctime,mtime,atime辨析]]></title>
      <url>http://blog.jade640.pub/2016/09/03/ctime-mtime-atime%E8%BE%A8%E6%9E%90/</url>
      <content type="html"><![CDATA[<h4 id="linux下的文件有三个时间参数："><a href="#linux下的文件有三个时间参数：" class="headerlink" title="linux下的文件有三个时间参数："></a>linux下的文件有三个时间参数：</h4><ol>
<li>mtime (modification time), 内容修改时间。<br> 指文件的<strong>内容</strong>发生变化时，而更新的时间。</li>
<li>atime (access time), 最后访问时间。<br> 这里的访问时间是指文件被读取，而更新的时间。</li>
<li>ctime (change time or status time), 文件状态修改的时间<br> 例如文件的拥有者、group发生改变的时间。</li>
</ol>
<p>关于mtime、atime、ctime的意义，下面的图片也给出了它们的介绍：<br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-atime-ctime-mtime.jpg" alt="mtime-atime-ctime.jpg"></p>
<h4 id="接下来，我们就可以通过ls或者stat命令来查看文件的这三个时间属性了。"><a href="#接下来，我们就可以通过ls或者stat命令来查看文件的这三个时间属性了。" class="headerlink" title="接下来，我们就可以通过ls或者stat命令来查看文件的这三个时间属性了。"></a>接下来，我们就可以通过ls或者stat命令来查看文件的这三个时间属性了。</h4><p><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-ls.jpg" alt="1"><br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-stat.jpg" alt="2"><br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-%E5%86%99%E5%85%A5%E5%86%85%E5%AE%B9%E6%94%B9%E5%8F%98mtime%E5%92%8Cctime.jpg" alt="3"><br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-atime%E5%8F%98%E5%8C%96.jpg" alt="4"><br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-ls%E6%94%B9%E5%8F%98mtime.jpg" alt="5"></p>
<p>以上我们可以通过：</p>
<ol>
<li>ls -l  来查看mtime，即默认显示mtime</li>
<li>ls -lc 来查看ctime</li>
<li>ls -lu 来查看atime</li>
</ol>
<p>由或者使用 stat filename 来查看它的三个时间。</p>
<h4 id="文章到这里似乎就可以结束了，但是你细心的话可能会发现，当我cat-filename之后，文件的atime并没有如图一般的发生变化。那么是为什么呢？"><a href="#文章到这里似乎就可以结束了，但是你细心的话可能会发现，当我cat-filename之后，文件的atime并没有如图一般的发生变化。那么是为什么呢？" class="headerlink" title="文章到这里似乎就可以结束了，但是你细心的话可能会发现，当我cat filename之后，文件的atime并没有如图一般的发生变化。那么是为什么呢？"></a>文章到这里似乎就可以结束了，但是你细心的话可能会发现，当我cat filename之后，文件的atime并没有如图一般的发生变化。那么是为什么呢？</h4><p>原来，在linux kenerl 2.6.30之前，文件系统中默认会及时更新atime。但是，在2.6.30之后，内核中修改atime的更新方式，发生了变化，不再是事实更新。<br><strong>为什么在2.6.30之后atime不再实时更新呢？</strong><br>因为实时更新会带来如下问题：</p>
<ol>
<li>系统中大量的文件访问，将atime写入到磁盘中，消耗时间，从而降低性能</li>
<li>这样的操作也会消耗电能</li>
</ol>
<p>在Linux上运行的，很少的应用程序需要获取精确的atime时间，并且Linux核心开发人员从Ext3/Ext4文件系统的性能角度出发，决定在2.6.30版本的内核中修改atime的更新方式，只有在将分区mount挂载的时候指定采用strictatime时，atime会及时更新。除了strictatime以外，还有noatime、relatime选项。<br>当指定为noatime时,noatime的作用如下图：<br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-noatime.jpg" alt="noatime"></p>
<p>当指定为relatime时，atime的更新规则如下：</p>
<ol>
<li>atime小于ctime或者小于mtime的时候更新</li>
<li>本次的access time和上次的atime超过24个小时</li>
</ol>
<p>如下图所示：</p>
<ol>
<li>首先修改/etc/fstab文件，将/的文件系统的挂载参数设置为relatime。并重新挂载该文件系统，如下图：<br>当前的挂载在/下的文件系统设置了noatime<br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-%E5%8E%9Ffstab.jpg" alt="nochange"><br>修改noatime属性，改为relatiime<br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-%E6%96%B0fstab.jpg" alt="change"><br>重新挂载/下的文件系统，并用mount命令查看挂载后更新的参数<br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-remount.jpg" alt="remount"></li>
<li>使用touch命令修改文件的atime，使其符合relatime模式下atime更新规则的第一项或者第二项。（<strong>touch本来的作用就是改变文件的时间属性，不要误解为touch只是用来创建文件的</strong>）<br><img src="http://obsd0zj7w.bkt.clouddn.com/20160903-%E8%A7%84%E5%88%991.jpg" alt="规则1"></li>
</ol>
<p>同理，当需要获取精确的atime时，可以修改/etc/fstab，改为strictatime.就可以令atime及时更新了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP 协议]]></title>
      <url>http://blog.jade640.pub/2016/08/22/HTTP-%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h4 id="好文mark-HTTP协议入门"><a href="#好文mark-HTTP协议入门" class="headerlink" title="好文mark,HTTP协议入门."></a>好文mark,<a href="http://www.ruanyifeng.com/blog/2016/08/http.html?bsh_bid=1486005889" target="_blank" rel="external">HTTP协议入门</a>.</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux passwd 文件内容解析]]></title>
      <url>http://blog.jade640.pub/2016/08/22/linux-passwd-%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h4 id="在linux-etc-passwd文件中，记录着系统每一个用户的一些基本信息。这个文件对所有用户都是可读的。"><a href="#在linux-etc-passwd文件中，记录着系统每一个用户的一些基本信息。这个文件对所有用户都是可读的。" class="headerlink" title="在linux /etc/passwd文件中，记录着系统每一个用户的一些基本信息。这个文件对所有用户都是可读的。"></a>在linux /etc/passwd文件中，记录着系统每一个用户的一些基本信息。这个文件对所有用户都是可读的。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@VM_108_62_centos:~</div><div class="line">▶ ll /etc/passwd</div><div class="line">-rw-r--r-- 1 root root 1.2K 8月  22 14:00 /etc/passwd</div></pre></td></tr></table></figure>
<h4 id="它的内容类似下面的例子："><a href="#它的内容类似下面的例子：" class="headerlink" title="它的内容类似下面的例子："></a>它的内容类似下面的例子：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">root@VM_108_62_centos:~</div><div class="line">▶ cat /etc/passwd</div><div class="line">root:x:0:0:root:/root:/bin/zsh</div><div class="line">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</div><div class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</div><div class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</div><div class="line">sync:x:5:0:sync:/sbin:/bin/sync</div><div class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</div><div class="line">halt:x:7:0:halt:/sbin:/sbin/halt</div><div class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</div><div class="line">uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">games:x:12:100:games:/usr/games:/sbin/nologin</div><div class="line">gopher:x:13:30:gopher:/var/gopher:/sbin/nologin</div><div class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</div><div class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</div><div class="line">vcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologin</div><div class="line">abrt:x:173:173::/etc/abrt:/sbin/nologin</div><div class="line">ntp:x:38:38::/etc/ntp:/sbin/nologin</div><div class="line">saslauth:x:499:76:<span class="string">"Saslauthd user"</span>:/var/empty/saslauth:/sbin/nologin</div><div class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</div><div class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</div><div class="line">tcpdump:x:72:72::/:/sbin/nologin</div><div class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</div><div class="line">apache:x:48:48:Apache:/var/www:/sbin/nologin</div><div class="line">nginx:x:498:498:nginx user:/var/cache/nginx:/sbin/nologin</div><div class="line">mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash</div><div class="line">git:x:502:502:git repositery:/home/git:/usr/bin/git-shell</div></pre></td></tr></table></figure>
<h4 id="可以看出，-etc-passwd每一行记录对应的一个用户-每一条记录又被冒号分隔为7个字段-其格式和具体含义如下："><a href="#可以看出，-etc-passwd每一行记录对应的一个用户-每一条记录又被冒号分隔为7个字段-其格式和具体含义如下：" class="headerlink" title="可以看出，/etc/passwd每一行记录对应的一个用户,每一条记录又被冒号分隔为7个字段,其格式和具体含义如下："></a>可以看出，/etc/passwd每一行记录对应的一个用户,每一条记录又被冒号分隔为7个字段,其格式和具体含义如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash </div><div class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录shell</div></pre></td></tr></table></figure>
<ol>
<li>用户名：是代表用户账号的字符串</li>
<li>口令： 在一些系统中，存放着加密后的用户口令字。虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。  </li>
<li>用户标识号: 是一个整数，系统内部用它来标识用户。</li>
<li>组标识号: 字段记录的是用户所属的用户组。它对应着/etc/group文件中的一条记录。</li>
<li>注释性描述: 描述字段</li>
<li>也就是用户的起始工作目录，它是用户在登录到系统之后所处的目录。</li>
<li>登录shell: 用户登录后,使用的shell版本，可以是常用的bash或者zsh，也可以是专门用户做git管理的git-shell。其中/sbin/nologin,表示该用户为『伪用户』，不能登录，如用户bin、nobody等，它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[deploy hexo and write post]]></title>
      <url>http://blog.jade640.pub/2016/08/07/deploy-hexo-and-write-post/</url>
      <content type="html"><![CDATA[<h1 id="environment"><a href="#environment" class="headerlink" title="environment:"></a>environment:</h1><ol>
<li>nodejs 4.7.7(need gcc 4.8.0 or higher )</li>
<li>git</li>
</ol>
<h1 id="install-hexo"><a href="#install-hexo" class="headerlink" title="install hexo:"></a>install hexo:</h1><ol>
<li>npm install hexo -g</li>
<li>hexo init</li>
<li>hexo generate</li>
<li>hexo server, then we will view the blog in brower with url: <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></li>
</ol>
<h1 id="deploy-to-github"><a href="#deploy-to-github" class="headerlink" title="deploy to github"></a>deploy to github</h1><ol>
<li><p>edit _config.yml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">   type: git</div><div class="line">   repo: address for github repository</div><div class="line">   branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>npm install hexo-deployer-git –save</p>
</li>
<li>config ssh</li>
<li>hexo deploy</li>
<li>then we can visit <a href="http://liusilin40.github.io" target="_blank" rel="external">http://liusilin40.github.io</a> to the blog</li>
</ol>
<h1 id="the-deploy-command-everytime-we-make-a-change"><a href="#the-deploy-command-everytime-we-make-a-change" class="headerlink" title="the deploy command everytime we make a change"></a>the deploy command everytime we make a change</h1><ol>
<li>hexo clean</li>
<li>hexo generate</li>
<li>hexo deploy</li>
</ol>
<h1 id="useful-command"><a href="#useful-command" class="headerlink" title="useful command"></a>useful command</h1><ol>
<li>hexo new “postName”  </li>
<li>hexo new page “pageName”</li>
<li>hexo generate</li>
<li>hexo deploy</li>
<li>hexo help</li>
</ol>
<h1 id="the-Theme"><a href="#the-Theme" class="headerlink" title="the Theme"></a>the Theme</h1><blockquote>
<p><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="external">https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak</a></p>
</blockquote>
<h1 id="when-we-change-something-in-the-theme-tranquilpeak-we-need-to-run-these-command"><a href="#when-we-change-something-in-the-theme-tranquilpeak-we-need-to-run-these-command" class="headerlink" title="when we change something in the theme(tranquilpeak), we need to run these command"></a>when we change something in the theme(tranquilpeak), we need to run these command</h1><ol>
<li>Go in theme/tranquilpeak folder with cd themes/tranquilpeak</li>
<li>Run npm install to install NPM dependencies</li>
<li>Run bower install to install Bower dependencies (when the root user, use this command: bower install –allow-root )<blockquote>
<p>for more information, you can get in <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="external">https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak</a></p>
</blockquote>
</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
